
"Name"     = 'Julia Programming Language'
"Author"   = 'Mennatullah Tarek' 
"About"    = 'A short description of Julia grammar'
"Start Symbol" = <Program>

!------------------------------------------------- Terminal 

Id={letter}
Digit={digit}  
     
!------------------------------------------------- Rules
<program> ::= Start <statment_list> End 
       
<statment_list> ::= <concept>
               |<concept> <statment_list>

<concept>::= <assign>
          |<if_statment>
          |<ifelse_statment>
          |<ifelseif_statment>
          |<for_statment>
          |<while_statment> 
          |<switch_statment>
          |<method_declaration>
          |<method_call>
          
<assign> ::= <id>'='<expr>
          
<id> ::= Id
      
<expr> ::= <expr>'+'<term>
        |<expr>'-'<term>
        |<term>
        
<term> ::= <term>'*'<factor>
        |<term>'/'<factor>
        |<term>'%'<factor>
        |<factor>

<factor> ::= <factor>'**'<exp>
          |<exp>
          
<exp> ::= '('<expr>')'
       |<id>
       |<digit>
       
<digit> ::= Digit  
         
!-------------------------------------------------- if statment

<if_statment> ::= if'('<cond>')'Start <statment_list> End 
           
<ifelse_statment> ::= if '('<cond>')'Start <statment_list> End else <statment_list> End
             
<ifelseif_statment> ::= if '('<cond>')'Start <statment_list> End elseif <statment_list> End else <statment_list> End

       
<cond> ::= <expr><op><expr>

<op> ::= '<'|'>'|'=='|'!='

!--------------------------------------------------- loop statment

<for_statment> ::= For '('<data><assign> ';' <cond> ';' <step>')' '{'<statment_list>'}'End

<while_statment> ::= While <cond> Do '{'<statment_list>'}' End
              
<switch_statment> ::= Switch '('<expr> ')' <switch_case_list> End

<switch_case_list> ::= <switch_case> | <switch_case> <switch_case_list>

<switch_case> ::= Case  '(' <id>|<digit>')' '{'<statment_list>'}'


                               
<data> ::= int |float |double |string
        
<step>::= '--'<id>
       |<id>'--'
       |'++'<id>
       |<id>'++'
       |<assign>
       

!--------------------------------------------------- Declaration + Calling methods

<method_declaration> ::= Function  <id> '(' <id>  ')' '{'<statment_list>'}' End

<method_call> ::= <id>  '(' <id>  ')'
               

